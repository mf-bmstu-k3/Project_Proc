// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/18/2025 18:29:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CYY_AU_OP_with_RR_YP
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CYY_AU_OP_with_RR_YP_vlg_sample_tst(
	clk,
	f_com,
	q_a,
	q_b,
	set,
	sampler_tx
);
input  clk;
input [1:0] f_com;
input [7:0] q_a;
input [7:0] q_b;
input  set;
output sampler_tx;

reg sample;
time current_time;
always @(clk or f_com or q_a or q_b or set)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CYY_AU_OP_with_RR_YP_vlg_check_tst (
	a,
	address_OP,
	b,
	CK,
	cop,
	data_in_a_RP,
	data_in_OP,
	data_out_OP,
	priznak,
	RA,
	RK,
	rr,
	s_out,
	sko,
	sno,
	wr_en_a_RP,
	wr_en_OP,
	sampler_rx
);
input [7:0] a;
input [7:0] address_OP;
input [7:0] b;
input [7:0] CK;
input  cop;
input [7:0] data_in_a_RP;
input [7:0] data_in_OP;
input [7:0] data_out_OP;
input [1:0] priznak;
input [7:0] RA;
input [7:0] RK;
input [15:0] rr;
input [2:0] s_out;
input  sko;
input  sno;
input  wr_en_a_RP;
input  wr_en_OP;
input sampler_rx;

reg [7:0] a_expected;
reg [7:0] address_OP_expected;
reg [7:0] b_expected;
reg [7:0] CK_expected;
reg  cop_expected;
reg [7:0] data_in_a_RP_expected;
reg [7:0] data_in_OP_expected;
reg [7:0] data_out_OP_expected;
reg [1:0] priznak_expected;
reg [7:0] RA_expected;
reg [7:0] RK_expected;
reg [15:0] rr_expected;
reg [2:0] s_out_expected;
reg  sko_expected;
reg  sno_expected;
reg  wr_en_a_RP_expected;
reg  wr_en_OP_expected;

reg [7:0] a_prev;
reg [7:0] address_OP_prev;
reg [7:0] b_prev;
reg [7:0] CK_prev;
reg  cop_prev;
reg [7:0] data_in_a_RP_prev;
reg [7:0] data_in_OP_prev;
reg [7:0] data_out_OP_prev;
reg [1:0] priznak_prev;
reg [7:0] RA_prev;
reg [7:0] RK_prev;
reg [15:0] rr_prev;
reg [2:0] s_out_prev;
reg  sko_prev;
reg  sno_prev;
reg  wr_en_a_RP_prev;
reg  wr_en_OP_prev;

reg [7:0] a_expected_prev;
reg [7:0] address_OP_expected_prev;
reg [7:0] b_expected_prev;
reg [7:0] CK_expected_prev;
reg  cop_expected_prev;
reg [7:0] data_in_a_RP_expected_prev;
reg [7:0] data_in_OP_expected_prev;
reg [7:0] data_out_OP_expected_prev;
reg [1:0] priznak_expected_prev;
reg [7:0] RA_expected_prev;
reg [7:0] RK_expected_prev;
reg [15:0] rr_expected_prev;
reg [2:0] s_out_expected_prev;
reg  sko_expected_prev;
reg  sno_expected_prev;
reg  wr_en_a_RP_expected_prev;
reg  wr_en_OP_expected_prev;

reg [7:0] last_a_exp;
reg [7:0] last_address_OP_exp;
reg [7:0] last_b_exp;
reg [7:0] last_CK_exp;
reg  last_cop_exp;
reg [7:0] last_data_in_a_RP_exp;
reg [7:0] last_data_in_OP_exp;
reg [7:0] last_data_out_OP_exp;
reg [1:0] last_priznak_exp;
reg [7:0] last_RA_exp;
reg [7:0] last_RK_exp;
reg [15:0] last_rr_exp;
reg [2:0] last_s_out_exp;
reg  last_sko_exp;
reg  last_sno_exp;
reg  last_wr_en_a_RP_exp;
reg  last_wr_en_OP_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	address_OP_prev = address_OP;
	b_prev = b;
	CK_prev = CK;
	cop_prev = cop;
	data_in_a_RP_prev = data_in_a_RP;
	data_in_OP_prev = data_in_OP;
	data_out_OP_prev = data_out_OP;
	priznak_prev = priznak;
	RA_prev = RA;
	RK_prev = RK;
	rr_prev = rr;
	s_out_prev = s_out;
	sko_prev = sko;
	sno_prev = sno;
	wr_en_a_RP_prev = wr_en_a_RP;
	wr_en_OP_prev = wr_en_OP;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	address_OP_expected_prev = address_OP_expected;
	b_expected_prev = b_expected;
	CK_expected_prev = CK_expected;
	cop_expected_prev = cop_expected;
	data_in_a_RP_expected_prev = data_in_a_RP_expected;
	data_in_OP_expected_prev = data_in_OP_expected;
	data_out_OP_expected_prev = data_out_OP_expected;
	priznak_expected_prev = priznak_expected;
	RA_expected_prev = RA_expected;
	RK_expected_prev = RK_expected;
	rr_expected_prev = rr_expected;
	s_out_expected_prev = s_out_expected;
	sko_expected_prev = sko_expected;
	sno_expected_prev = sno_expected;
	wr_en_a_RP_expected_prev = wr_en_a_RP_expected;
	wr_en_OP_expected_prev = wr_en_OP_expected;
end


// expected a[ 7 ]
initial
begin
	a_expected[7] = 1'bX;
	a_expected[7] = #999000 1'b0;
end 
// expected a[ 6 ]
initial
begin
	a_expected[6] = 1'bX;
	a_expected[6] = #999000 1'b0;
end 
// expected a[ 5 ]
initial
begin
	a_expected[5] = 1'bX;
	a_expected[5] = #999000 1'b0;
end 
// expected a[ 4 ]
initial
begin
	a_expected[4] = 1'bX;
	a_expected[4] = #999000 1'b0;
end 
// expected a[ 3 ]
initial
begin
	a_expected[3] = 1'bX;
	a_expected[3] = #999000 1'b0;
end 
// expected a[ 2 ]
initial
begin
	a_expected[2] = 1'bX;
	a_expected[2] = #999000 1'b0;
end 
// expected a[ 1 ]
initial
begin
	a_expected[1] = 1'bX;
	a_expected[1] = #999000 1'b0;
end 
// expected a[ 0 ]
initial
begin
	a_expected[0] = 1'bX;
	a_expected[0] = #999000 1'b0;
end 
// expected b[ 7 ]
initial
begin
	b_expected[7] = 1'bX;
	b_expected[7] = #999000 1'b0;
end 
// expected b[ 6 ]
initial
begin
	b_expected[6] = 1'bX;
	b_expected[6] = #999000 1'b0;
end 
// expected b[ 5 ]
initial
begin
	b_expected[5] = 1'bX;
	b_expected[5] = #999000 1'b0;
end 
// expected b[ 4 ]
initial
begin
	b_expected[4] = 1'bX;
	b_expected[4] = #999000 1'b0;
end 
// expected b[ 3 ]
initial
begin
	b_expected[3] = 1'bX;
	b_expected[3] = #999000 1'b0;
end 
// expected b[ 2 ]
initial
begin
	b_expected[2] = 1'bX;
	b_expected[2] = #999000 1'b0;
end 
// expected b[ 1 ]
initial
begin
	b_expected[1] = 1'bX;
	b_expected[1] = #999000 1'b0;
end 
// expected b[ 0 ]
initial
begin
	b_expected[0] = 1'bX;
	b_expected[0] = #999000 1'b0;
end 

// expected cop
initial
begin
	cop_expected = 1'bX;
	cop_expected = #999000 1'b0;
end 
// expected s_out[ 2 ]
initial
begin
	s_out_expected[2] = 1'bX;
	s_out_expected[2] = #999000 1'b0;
end 
// expected s_out[ 1 ]
initial
begin
	s_out_expected[1] = 1'bX;
	s_out_expected[1] = #999000 1'b0;
end 
// expected s_out[ 0 ]
initial
begin
	s_out_expected[0] = 1'bX;
	s_out_expected[0] = #999000 1'b0;
end 
// expected data_in_OP[ 7 ]
initial
begin
	data_in_OP_expected[7] = 1'bX;
	data_in_OP_expected[7] = #999000 1'b0;
end 
// expected data_in_OP[ 6 ]
initial
begin
	data_in_OP_expected[6] = 1'bX;
	data_in_OP_expected[6] = #999000 1'b0;
end 
// expected data_in_OP[ 5 ]
initial
begin
	data_in_OP_expected[5] = 1'bX;
	data_in_OP_expected[5] = #999000 1'b0;
end 
// expected data_in_OP[ 4 ]
initial
begin
	data_in_OP_expected[4] = 1'bX;
	data_in_OP_expected[4] = #999000 1'b0;
end 
// expected data_in_OP[ 3 ]
initial
begin
	data_in_OP_expected[3] = 1'bX;
	data_in_OP_expected[3] = #999000 1'b0;
end 
// expected data_in_OP[ 2 ]
initial
begin
	data_in_OP_expected[2] = 1'bX;
	data_in_OP_expected[2] = #999000 1'b0;
end 
// expected data_in_OP[ 1 ]
initial
begin
	data_in_OP_expected[1] = 1'bX;
	data_in_OP_expected[1] = #999000 1'b0;
end 
// expected data_in_OP[ 0 ]
initial
begin
	data_in_OP_expected[0] = 1'bX;
	data_in_OP_expected[0] = #999000 1'b0;
end 
// expected address_OP[ 7 ]
initial
begin
	address_OP_expected[7] = 1'bX;
	address_OP_expected[7] = #999000 1'b0;
end 
// expected address_OP[ 6 ]
initial
begin
	address_OP_expected[6] = 1'bX;
	address_OP_expected[6] = #999000 1'b0;
end 
// expected address_OP[ 5 ]
initial
begin
	address_OP_expected[5] = 1'bX;
	address_OP_expected[5] = #999000 1'b0;
end 
// expected address_OP[ 4 ]
initial
begin
	address_OP_expected[4] = 1'bX;
	address_OP_expected[4] = #999000 1'b0;
end 
// expected address_OP[ 3 ]
initial
begin
	address_OP_expected[3] = 1'bX;
	address_OP_expected[3] = #999000 1'b0;
end 
// expected address_OP[ 2 ]
initial
begin
	address_OP_expected[2] = 1'bX;
	address_OP_expected[2] = #999000 1'b0;
end 
// expected address_OP[ 1 ]
initial
begin
	address_OP_expected[1] = 1'bX;
	address_OP_expected[1] = #999000 1'b0;
end 
// expected address_OP[ 0 ]
initial
begin
	address_OP_expected[0] = 1'bX;
	address_OP_expected[0] = #999000 1'b0;
end 
// expected data_out_OP[ 7 ]
initial
begin
	data_out_OP_expected[7] = 1'bX;
	data_out_OP_expected[7] = #999000 1'b0;
end 
// expected data_out_OP[ 6 ]
initial
begin
	data_out_OP_expected[6] = 1'bX;
	data_out_OP_expected[6] = #999000 1'b0;
end 
// expected data_out_OP[ 5 ]
initial
begin
	data_out_OP_expected[5] = 1'bX;
	data_out_OP_expected[5] = #999000 1'b0;
end 
// expected data_out_OP[ 4 ]
initial
begin
	data_out_OP_expected[4] = 1'bX;
	data_out_OP_expected[4] = #999000 1'b0;
end 
// expected data_out_OP[ 3 ]
initial
begin
	data_out_OP_expected[3] = 1'bX;
	data_out_OP_expected[3] = #999000 1'b0;
end 
// expected data_out_OP[ 2 ]
initial
begin
	data_out_OP_expected[2] = 1'bX;
	data_out_OP_expected[2] = #999000 1'b0;
end 
// expected data_out_OP[ 1 ]
initial
begin
	data_out_OP_expected[1] = 1'bX;
	data_out_OP_expected[1] = #999000 1'b0;
end 
// expected data_out_OP[ 0 ]
initial
begin
	data_out_OP_expected[0] = 1'bX;
	data_out_OP_expected[0] = #999000 1'b0;
end 

// expected wr_en_OP
initial
begin
	wr_en_OP_expected = 1'bX;
	wr_en_OP_expected = #999000 1'b0;
end 
// expected CK[ 7 ]
initial
begin
	CK_expected[7] = 1'bX;
	CK_expected[7] = #999000 1'b0;
end 
// expected CK[ 6 ]
initial
begin
	CK_expected[6] = 1'bX;
	CK_expected[6] = #999000 1'b0;
end 
// expected CK[ 5 ]
initial
begin
	CK_expected[5] = 1'bX;
	CK_expected[5] = #999000 1'b0;
end 
// expected CK[ 4 ]
initial
begin
	CK_expected[4] = 1'bX;
	CK_expected[4] = #999000 1'b0;
end 
// expected CK[ 3 ]
initial
begin
	CK_expected[3] = 1'bX;
	CK_expected[3] = #999000 1'b0;
end 
// expected CK[ 2 ]
initial
begin
	CK_expected[2] = 1'bX;
	CK_expected[2] = #999000 1'b0;
end 
// expected CK[ 1 ]
initial
begin
	CK_expected[1] = 1'bX;
	CK_expected[1] = #999000 1'b0;
end 
// expected CK[ 0 ]
initial
begin
	CK_expected[0] = 1'bX;
	CK_expected[0] = #999000 1'b0;
end 
// expected RK[ 7 ]
initial
begin
	RK_expected[7] = 1'bX;
	RK_expected[7] = #999000 1'b0;
end 
// expected RK[ 6 ]
initial
begin
	RK_expected[6] = 1'bX;
	RK_expected[6] = #999000 1'b0;
end 
// expected RK[ 5 ]
initial
begin
	RK_expected[5] = 1'bX;
	RK_expected[5] = #999000 1'b0;
end 
// expected RK[ 4 ]
initial
begin
	RK_expected[4] = 1'bX;
	RK_expected[4] = #999000 1'b0;
end 
// expected RK[ 3 ]
initial
begin
	RK_expected[3] = 1'bX;
	RK_expected[3] = #999000 1'b0;
end 
// expected RK[ 2 ]
initial
begin
	RK_expected[2] = 1'bX;
	RK_expected[2] = #999000 1'b0;
end 
// expected RK[ 1 ]
initial
begin
	RK_expected[1] = 1'bX;
	RK_expected[1] = #999000 1'b0;
end 
// expected RK[ 0 ]
initial
begin
	RK_expected[0] = 1'bX;
	RK_expected[0] = #999000 1'b0;
end 
// expected RA[ 7 ]
initial
begin
	RA_expected[7] = 1'bX;
	RA_expected[7] = #999000 1'b0;
end 
// expected RA[ 6 ]
initial
begin
	RA_expected[6] = 1'bX;
	RA_expected[6] = #999000 1'b0;
end 
// expected RA[ 5 ]
initial
begin
	RA_expected[5] = 1'bX;
	RA_expected[5] = #999000 1'b0;
end 
// expected RA[ 4 ]
initial
begin
	RA_expected[4] = 1'bX;
	RA_expected[4] = #999000 1'b0;
end 
// expected RA[ 3 ]
initial
begin
	RA_expected[3] = 1'bX;
	RA_expected[3] = #999000 1'b0;
end 
// expected RA[ 2 ]
initial
begin
	RA_expected[2] = 1'bX;
	RA_expected[2] = #999000 1'b0;
end 
// expected RA[ 1 ]
initial
begin
	RA_expected[1] = 1'bX;
	RA_expected[1] = #999000 1'b0;
end 
// expected RA[ 0 ]
initial
begin
	RA_expected[0] = 1'bX;
	RA_expected[0] = #999000 1'b0;
end 

// expected sno
initial
begin
	sno_expected = 1'bX;
	sno_expected = #999000 1'b0;
end 

// expected sko
initial
begin
	sko_expected = 1'bX;
	sko_expected = #999000 1'b0;
end 
// expected rr[ 15 ]
initial
begin
	rr_expected[15] = 1'bX;
	rr_expected[15] = #999000 1'b0;
end 
// expected rr[ 14 ]
initial
begin
	rr_expected[14] = 1'bX;
	rr_expected[14] = #999000 1'b0;
end 
// expected rr[ 13 ]
initial
begin
	rr_expected[13] = 1'bX;
	rr_expected[13] = #999000 1'b0;
end 
// expected rr[ 12 ]
initial
begin
	rr_expected[12] = 1'bX;
	rr_expected[12] = #999000 1'b0;
end 
// expected rr[ 11 ]
initial
begin
	rr_expected[11] = 1'bX;
	rr_expected[11] = #999000 1'b0;
end 
// expected rr[ 10 ]
initial
begin
	rr_expected[10] = 1'bX;
	rr_expected[10] = #999000 1'b0;
end 
// expected rr[ 9 ]
initial
begin
	rr_expected[9] = 1'bX;
	rr_expected[9] = #999000 1'b0;
end 
// expected rr[ 8 ]
initial
begin
	rr_expected[8] = 1'bX;
	rr_expected[8] = #999000 1'b0;
end 
// expected rr[ 7 ]
initial
begin
	rr_expected[7] = 1'bX;
	rr_expected[7] = #999000 1'b0;
end 
// expected rr[ 6 ]
initial
begin
	rr_expected[6] = 1'bX;
	rr_expected[6] = #999000 1'b0;
end 
// expected rr[ 5 ]
initial
begin
	rr_expected[5] = 1'bX;
	rr_expected[5] = #999000 1'b0;
end 
// expected rr[ 4 ]
initial
begin
	rr_expected[4] = 1'bX;
	rr_expected[4] = #999000 1'b0;
end 
// expected rr[ 3 ]
initial
begin
	rr_expected[3] = 1'bX;
	rr_expected[3] = #999000 1'b0;
end 
// expected rr[ 2 ]
initial
begin
	rr_expected[2] = 1'bX;
	rr_expected[2] = #999000 1'b0;
end 
// expected rr[ 1 ]
initial
begin
	rr_expected[1] = 1'bX;
	rr_expected[1] = #999000 1'b0;
end 
// expected rr[ 0 ]
initial
begin
	rr_expected[0] = 1'bX;
	rr_expected[0] = #999000 1'b0;
end 
// expected priznak[ 1 ]
initial
begin
	priznak_expected[1] = 1'bX;
	priznak_expected[1] = #999000 1'b0;
end 
// expected priznak[ 0 ]
initial
begin
	priznak_expected[0] = 1'bX;
	priznak_expected[0] = #999000 1'b0;
end 
// expected data_in_a_RP[ 7 ]
initial
begin
	data_in_a_RP_expected[7] = 1'bX;
	data_in_a_RP_expected[7] = #999000 1'b0;
end 
// expected data_in_a_RP[ 6 ]
initial
begin
	data_in_a_RP_expected[6] = 1'bX;
	data_in_a_RP_expected[6] = #999000 1'b0;
end 
// expected data_in_a_RP[ 5 ]
initial
begin
	data_in_a_RP_expected[5] = 1'bX;
	data_in_a_RP_expected[5] = #999000 1'b0;
end 
// expected data_in_a_RP[ 4 ]
initial
begin
	data_in_a_RP_expected[4] = 1'bX;
	data_in_a_RP_expected[4] = #999000 1'b0;
end 
// expected data_in_a_RP[ 3 ]
initial
begin
	data_in_a_RP_expected[3] = 1'bX;
	data_in_a_RP_expected[3] = #999000 1'b0;
end 
// expected data_in_a_RP[ 2 ]
initial
begin
	data_in_a_RP_expected[2] = 1'bX;
	data_in_a_RP_expected[2] = #999000 1'b0;
end 
// expected data_in_a_RP[ 1 ]
initial
begin
	data_in_a_RP_expected[1] = 1'bX;
	data_in_a_RP_expected[1] = #999000 1'b0;
end 
// expected data_in_a_RP[ 0 ]
initial
begin
	data_in_a_RP_expected[0] = 1'bX;
	data_in_a_RP_expected[0] = #999000 1'b0;
end 

// expected wr_en_a_RP
initial
begin
	wr_en_a_RP_expected = 1'bX;
	wr_en_a_RP_expected = #999000 1'b0;
end 
// generate trigger
always @(a_expected or a or address_OP_expected or address_OP or b_expected or b or CK_expected or CK or cop_expected or cop or data_in_a_RP_expected or data_in_a_RP or data_in_OP_expected or data_in_OP or data_out_OP_expected or data_out_OP or priznak_expected or priznak or RA_expected or RA or RK_expected or RK or rr_expected or rr or s_out_expected or s_out or sko_expected or sko or sno_expected or sno or wr_en_a_RP_expected or wr_en_a_RP or wr_en_OP_expected or wr_en_OP)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected address_OP = %b | expected b = %b | expected CK = %b | expected cop = %b | expected data_in_a_RP = %b | expected data_in_OP = %b | expected data_out_OP = %b | expected priznak = %b | expected RA = %b | expected RK = %b | expected rr = %b | expected s_out = %b | expected sko = %b | expected sno = %b | expected wr_en_a_RP = %b | expected wr_en_OP = %b | ",a_expected_prev,address_OP_expected_prev,b_expected_prev,CK_expected_prev,cop_expected_prev,data_in_a_RP_expected_prev,data_in_OP_expected_prev,data_out_OP_expected_prev,priznak_expected_prev,RA_expected_prev,RK_expected_prev,rr_expected_prev,s_out_expected_prev,sko_expected_prev,sno_expected_prev,wr_en_a_RP_expected_prev,wr_en_OP_expected_prev);
	$display("| real a = %b | real address_OP = %b | real b = %b | real CK = %b | real cop = %b | real data_in_a_RP = %b | real data_in_OP = %b | real data_out_OP = %b | real priznak = %b | real RA = %b | real RK = %b | real rr = %b | real s_out = %b | real sko = %b | real sno = %b | real wr_en_a_RP = %b | real wr_en_OP = %b | ",a_prev,address_OP_prev,b_prev,CK_prev,cop_prev,data_in_a_RP_prev,data_in_OP_prev,data_out_OP_prev,priznak_prev,RA_prev,RK_prev,rr_prev,s_out_prev,sko_prev,sno_prev,wr_en_a_RP_prev,wr_en_OP_prev);
`endif
	if (
		( a_expected_prev[0] !== 1'bx ) && ( a_prev[0] !== a_expected_prev[0] )
		&& ((a_expected_prev[0] !== last_a_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[0] = a_expected_prev[0];
	end
	if (
		( a_expected_prev[1] !== 1'bx ) && ( a_prev[1] !== a_expected_prev[1] )
		&& ((a_expected_prev[1] !== last_a_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[1] = a_expected_prev[1];
	end
	if (
		( a_expected_prev[2] !== 1'bx ) && ( a_prev[2] !== a_expected_prev[2] )
		&& ((a_expected_prev[2] !== last_a_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[2] = a_expected_prev[2];
	end
	if (
		( a_expected_prev[3] !== 1'bx ) && ( a_prev[3] !== a_expected_prev[3] )
		&& ((a_expected_prev[3] !== last_a_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[3] = a_expected_prev[3];
	end
	if (
		( a_expected_prev[4] !== 1'bx ) && ( a_prev[4] !== a_expected_prev[4] )
		&& ((a_expected_prev[4] !== last_a_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[4] = a_expected_prev[4];
	end
	if (
		( a_expected_prev[5] !== 1'bx ) && ( a_prev[5] !== a_expected_prev[5] )
		&& ((a_expected_prev[5] !== last_a_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[5] = a_expected_prev[5];
	end
	if (
		( a_expected_prev[6] !== 1'bx ) && ( a_prev[6] !== a_expected_prev[6] )
		&& ((a_expected_prev[6] !== last_a_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[6] = a_expected_prev[6];
	end
	if (
		( a_expected_prev[7] !== 1'bx ) && ( a_prev[7] !== a_expected_prev[7] )
		&& ((a_expected_prev[7] !== last_a_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[7] = a_expected_prev[7];
	end
	if (
		( address_OP_expected_prev[0] !== 1'bx ) && ( address_OP_prev[0] !== address_OP_expected_prev[0] )
		&& ((address_OP_expected_prev[0] !== last_address_OP_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_OP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_OP_expected_prev);
		$display ("     Real value = %b", address_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_OP_exp[0] = address_OP_expected_prev[0];
	end
	if (
		( address_OP_expected_prev[1] !== 1'bx ) && ( address_OP_prev[1] !== address_OP_expected_prev[1] )
		&& ((address_OP_expected_prev[1] !== last_address_OP_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_OP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_OP_expected_prev);
		$display ("     Real value = %b", address_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_OP_exp[1] = address_OP_expected_prev[1];
	end
	if (
		( address_OP_expected_prev[2] !== 1'bx ) && ( address_OP_prev[2] !== address_OP_expected_prev[2] )
		&& ((address_OP_expected_prev[2] !== last_address_OP_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_OP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_OP_expected_prev);
		$display ("     Real value = %b", address_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_OP_exp[2] = address_OP_expected_prev[2];
	end
	if (
		( address_OP_expected_prev[3] !== 1'bx ) && ( address_OP_prev[3] !== address_OP_expected_prev[3] )
		&& ((address_OP_expected_prev[3] !== last_address_OP_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_OP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_OP_expected_prev);
		$display ("     Real value = %b", address_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_OP_exp[3] = address_OP_expected_prev[3];
	end
	if (
		( address_OP_expected_prev[4] !== 1'bx ) && ( address_OP_prev[4] !== address_OP_expected_prev[4] )
		&& ((address_OP_expected_prev[4] !== last_address_OP_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_OP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_OP_expected_prev);
		$display ("     Real value = %b", address_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_OP_exp[4] = address_OP_expected_prev[4];
	end
	if (
		( address_OP_expected_prev[5] !== 1'bx ) && ( address_OP_prev[5] !== address_OP_expected_prev[5] )
		&& ((address_OP_expected_prev[5] !== last_address_OP_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_OP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_OP_expected_prev);
		$display ("     Real value = %b", address_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_OP_exp[5] = address_OP_expected_prev[5];
	end
	if (
		( address_OP_expected_prev[6] !== 1'bx ) && ( address_OP_prev[6] !== address_OP_expected_prev[6] )
		&& ((address_OP_expected_prev[6] !== last_address_OP_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_OP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_OP_expected_prev);
		$display ("     Real value = %b", address_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_OP_exp[6] = address_OP_expected_prev[6];
	end
	if (
		( address_OP_expected_prev[7] !== 1'bx ) && ( address_OP_prev[7] !== address_OP_expected_prev[7] )
		&& ((address_OP_expected_prev[7] !== last_address_OP_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_OP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_OP_expected_prev);
		$display ("     Real value = %b", address_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_OP_exp[7] = address_OP_expected_prev[7];
	end
	if (
		( b_expected_prev[0] !== 1'bx ) && ( b_prev[0] !== b_expected_prev[0] )
		&& ((b_expected_prev[0] !== last_b_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[0] = b_expected_prev[0];
	end
	if (
		( b_expected_prev[1] !== 1'bx ) && ( b_prev[1] !== b_expected_prev[1] )
		&& ((b_expected_prev[1] !== last_b_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[1] = b_expected_prev[1];
	end
	if (
		( b_expected_prev[2] !== 1'bx ) && ( b_prev[2] !== b_expected_prev[2] )
		&& ((b_expected_prev[2] !== last_b_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[2] = b_expected_prev[2];
	end
	if (
		( b_expected_prev[3] !== 1'bx ) && ( b_prev[3] !== b_expected_prev[3] )
		&& ((b_expected_prev[3] !== last_b_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[3] = b_expected_prev[3];
	end
	if (
		( b_expected_prev[4] !== 1'bx ) && ( b_prev[4] !== b_expected_prev[4] )
		&& ((b_expected_prev[4] !== last_b_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[4] = b_expected_prev[4];
	end
	if (
		( b_expected_prev[5] !== 1'bx ) && ( b_prev[5] !== b_expected_prev[5] )
		&& ((b_expected_prev[5] !== last_b_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[5] = b_expected_prev[5];
	end
	if (
		( b_expected_prev[6] !== 1'bx ) && ( b_prev[6] !== b_expected_prev[6] )
		&& ((b_expected_prev[6] !== last_b_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[6] = b_expected_prev[6];
	end
	if (
		( b_expected_prev[7] !== 1'bx ) && ( b_prev[7] !== b_expected_prev[7] )
		&& ((b_expected_prev[7] !== last_b_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[7] = b_expected_prev[7];
	end
	if (
		( CK_expected_prev[0] !== 1'bx ) && ( CK_prev[0] !== CK_expected_prev[0] )
		&& ((CK_expected_prev[0] !== last_CK_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CK[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CK_expected_prev);
		$display ("     Real value = %b", CK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CK_exp[0] = CK_expected_prev[0];
	end
	if (
		( CK_expected_prev[1] !== 1'bx ) && ( CK_prev[1] !== CK_expected_prev[1] )
		&& ((CK_expected_prev[1] !== last_CK_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CK[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CK_expected_prev);
		$display ("     Real value = %b", CK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CK_exp[1] = CK_expected_prev[1];
	end
	if (
		( CK_expected_prev[2] !== 1'bx ) && ( CK_prev[2] !== CK_expected_prev[2] )
		&& ((CK_expected_prev[2] !== last_CK_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CK[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CK_expected_prev);
		$display ("     Real value = %b", CK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CK_exp[2] = CK_expected_prev[2];
	end
	if (
		( CK_expected_prev[3] !== 1'bx ) && ( CK_prev[3] !== CK_expected_prev[3] )
		&& ((CK_expected_prev[3] !== last_CK_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CK[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CK_expected_prev);
		$display ("     Real value = %b", CK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CK_exp[3] = CK_expected_prev[3];
	end
	if (
		( CK_expected_prev[4] !== 1'bx ) && ( CK_prev[4] !== CK_expected_prev[4] )
		&& ((CK_expected_prev[4] !== last_CK_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CK[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CK_expected_prev);
		$display ("     Real value = %b", CK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CK_exp[4] = CK_expected_prev[4];
	end
	if (
		( CK_expected_prev[5] !== 1'bx ) && ( CK_prev[5] !== CK_expected_prev[5] )
		&& ((CK_expected_prev[5] !== last_CK_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CK[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CK_expected_prev);
		$display ("     Real value = %b", CK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CK_exp[5] = CK_expected_prev[5];
	end
	if (
		( CK_expected_prev[6] !== 1'bx ) && ( CK_prev[6] !== CK_expected_prev[6] )
		&& ((CK_expected_prev[6] !== last_CK_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CK[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CK_expected_prev);
		$display ("     Real value = %b", CK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CK_exp[6] = CK_expected_prev[6];
	end
	if (
		( CK_expected_prev[7] !== 1'bx ) && ( CK_prev[7] !== CK_expected_prev[7] )
		&& ((CK_expected_prev[7] !== last_CK_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CK[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CK_expected_prev);
		$display ("     Real value = %b", CK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CK_exp[7] = CK_expected_prev[7];
	end
	if (
		( cop_expected_prev !== 1'bx ) && ( cop_prev !== cop_expected_prev )
		&& ((cop_expected_prev !== last_cop_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cop :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cop_expected_prev);
		$display ("     Real value = %b", cop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_cop_exp = cop_expected_prev;
	end
	if (
		( data_in_a_RP_expected_prev[0] !== 1'bx ) && ( data_in_a_RP_prev[0] !== data_in_a_RP_expected_prev[0] )
		&& ((data_in_a_RP_expected_prev[0] !== last_data_in_a_RP_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_a_RP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_a_RP_expected_prev);
		$display ("     Real value = %b", data_in_a_RP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_in_a_RP_exp[0] = data_in_a_RP_expected_prev[0];
	end
	if (
		( data_in_a_RP_expected_prev[1] !== 1'bx ) && ( data_in_a_RP_prev[1] !== data_in_a_RP_expected_prev[1] )
		&& ((data_in_a_RP_expected_prev[1] !== last_data_in_a_RP_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_a_RP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_a_RP_expected_prev);
		$display ("     Real value = %b", data_in_a_RP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_in_a_RP_exp[1] = data_in_a_RP_expected_prev[1];
	end
	if (
		( data_in_a_RP_expected_prev[2] !== 1'bx ) && ( data_in_a_RP_prev[2] !== data_in_a_RP_expected_prev[2] )
		&& ((data_in_a_RP_expected_prev[2] !== last_data_in_a_RP_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_a_RP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_a_RP_expected_prev);
		$display ("     Real value = %b", data_in_a_RP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_in_a_RP_exp[2] = data_in_a_RP_expected_prev[2];
	end
	if (
		( data_in_a_RP_expected_prev[3] !== 1'bx ) && ( data_in_a_RP_prev[3] !== data_in_a_RP_expected_prev[3] )
		&& ((data_in_a_RP_expected_prev[3] !== last_data_in_a_RP_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_a_RP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_a_RP_expected_prev);
		$display ("     Real value = %b", data_in_a_RP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_in_a_RP_exp[3] = data_in_a_RP_expected_prev[3];
	end
	if (
		( data_in_a_RP_expected_prev[4] !== 1'bx ) && ( data_in_a_RP_prev[4] !== data_in_a_RP_expected_prev[4] )
		&& ((data_in_a_RP_expected_prev[4] !== last_data_in_a_RP_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_a_RP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_a_RP_expected_prev);
		$display ("     Real value = %b", data_in_a_RP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_in_a_RP_exp[4] = data_in_a_RP_expected_prev[4];
	end
	if (
		( data_in_a_RP_expected_prev[5] !== 1'bx ) && ( data_in_a_RP_prev[5] !== data_in_a_RP_expected_prev[5] )
		&& ((data_in_a_RP_expected_prev[5] !== last_data_in_a_RP_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_a_RP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_a_RP_expected_prev);
		$display ("     Real value = %b", data_in_a_RP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_in_a_RP_exp[5] = data_in_a_RP_expected_prev[5];
	end
	if (
		( data_in_a_RP_expected_prev[6] !== 1'bx ) && ( data_in_a_RP_prev[6] !== data_in_a_RP_expected_prev[6] )
		&& ((data_in_a_RP_expected_prev[6] !== last_data_in_a_RP_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_a_RP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_a_RP_expected_prev);
		$display ("     Real value = %b", data_in_a_RP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_in_a_RP_exp[6] = data_in_a_RP_expected_prev[6];
	end
	if (
		( data_in_a_RP_expected_prev[7] !== 1'bx ) && ( data_in_a_RP_prev[7] !== data_in_a_RP_expected_prev[7] )
		&& ((data_in_a_RP_expected_prev[7] !== last_data_in_a_RP_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_a_RP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_a_RP_expected_prev);
		$display ("     Real value = %b", data_in_a_RP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_in_a_RP_exp[7] = data_in_a_RP_expected_prev[7];
	end
	if (
		( data_in_OP_expected_prev[0] !== 1'bx ) && ( data_in_OP_prev[0] !== data_in_OP_expected_prev[0] )
		&& ((data_in_OP_expected_prev[0] !== last_data_in_OP_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_OP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_OP_expected_prev);
		$display ("     Real value = %b", data_in_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_in_OP_exp[0] = data_in_OP_expected_prev[0];
	end
	if (
		( data_in_OP_expected_prev[1] !== 1'bx ) && ( data_in_OP_prev[1] !== data_in_OP_expected_prev[1] )
		&& ((data_in_OP_expected_prev[1] !== last_data_in_OP_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_OP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_OP_expected_prev);
		$display ("     Real value = %b", data_in_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_in_OP_exp[1] = data_in_OP_expected_prev[1];
	end
	if (
		( data_in_OP_expected_prev[2] !== 1'bx ) && ( data_in_OP_prev[2] !== data_in_OP_expected_prev[2] )
		&& ((data_in_OP_expected_prev[2] !== last_data_in_OP_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_OP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_OP_expected_prev);
		$display ("     Real value = %b", data_in_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_in_OP_exp[2] = data_in_OP_expected_prev[2];
	end
	if (
		( data_in_OP_expected_prev[3] !== 1'bx ) && ( data_in_OP_prev[3] !== data_in_OP_expected_prev[3] )
		&& ((data_in_OP_expected_prev[3] !== last_data_in_OP_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_OP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_OP_expected_prev);
		$display ("     Real value = %b", data_in_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_in_OP_exp[3] = data_in_OP_expected_prev[3];
	end
	if (
		( data_in_OP_expected_prev[4] !== 1'bx ) && ( data_in_OP_prev[4] !== data_in_OP_expected_prev[4] )
		&& ((data_in_OP_expected_prev[4] !== last_data_in_OP_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_OP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_OP_expected_prev);
		$display ("     Real value = %b", data_in_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_in_OP_exp[4] = data_in_OP_expected_prev[4];
	end
	if (
		( data_in_OP_expected_prev[5] !== 1'bx ) && ( data_in_OP_prev[5] !== data_in_OP_expected_prev[5] )
		&& ((data_in_OP_expected_prev[5] !== last_data_in_OP_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_OP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_OP_expected_prev);
		$display ("     Real value = %b", data_in_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_in_OP_exp[5] = data_in_OP_expected_prev[5];
	end
	if (
		( data_in_OP_expected_prev[6] !== 1'bx ) && ( data_in_OP_prev[6] !== data_in_OP_expected_prev[6] )
		&& ((data_in_OP_expected_prev[6] !== last_data_in_OP_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_OP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_OP_expected_prev);
		$display ("     Real value = %b", data_in_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_in_OP_exp[6] = data_in_OP_expected_prev[6];
	end
	if (
		( data_in_OP_expected_prev[7] !== 1'bx ) && ( data_in_OP_prev[7] !== data_in_OP_expected_prev[7] )
		&& ((data_in_OP_expected_prev[7] !== last_data_in_OP_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_in_OP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_in_OP_expected_prev);
		$display ("     Real value = %b", data_in_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_in_OP_exp[7] = data_in_OP_expected_prev[7];
	end
	if (
		( data_out_OP_expected_prev[0] !== 1'bx ) && ( data_out_OP_prev[0] !== data_out_OP_expected_prev[0] )
		&& ((data_out_OP_expected_prev[0] !== last_data_out_OP_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_OP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_OP_expected_prev);
		$display ("     Real value = %b", data_out_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_out_OP_exp[0] = data_out_OP_expected_prev[0];
	end
	if (
		( data_out_OP_expected_prev[1] !== 1'bx ) && ( data_out_OP_prev[1] !== data_out_OP_expected_prev[1] )
		&& ((data_out_OP_expected_prev[1] !== last_data_out_OP_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_OP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_OP_expected_prev);
		$display ("     Real value = %b", data_out_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_out_OP_exp[1] = data_out_OP_expected_prev[1];
	end
	if (
		( data_out_OP_expected_prev[2] !== 1'bx ) && ( data_out_OP_prev[2] !== data_out_OP_expected_prev[2] )
		&& ((data_out_OP_expected_prev[2] !== last_data_out_OP_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_OP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_OP_expected_prev);
		$display ("     Real value = %b", data_out_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_out_OP_exp[2] = data_out_OP_expected_prev[2];
	end
	if (
		( data_out_OP_expected_prev[3] !== 1'bx ) && ( data_out_OP_prev[3] !== data_out_OP_expected_prev[3] )
		&& ((data_out_OP_expected_prev[3] !== last_data_out_OP_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_OP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_OP_expected_prev);
		$display ("     Real value = %b", data_out_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_out_OP_exp[3] = data_out_OP_expected_prev[3];
	end
	if (
		( data_out_OP_expected_prev[4] !== 1'bx ) && ( data_out_OP_prev[4] !== data_out_OP_expected_prev[4] )
		&& ((data_out_OP_expected_prev[4] !== last_data_out_OP_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_OP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_OP_expected_prev);
		$display ("     Real value = %b", data_out_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_out_OP_exp[4] = data_out_OP_expected_prev[4];
	end
	if (
		( data_out_OP_expected_prev[5] !== 1'bx ) && ( data_out_OP_prev[5] !== data_out_OP_expected_prev[5] )
		&& ((data_out_OP_expected_prev[5] !== last_data_out_OP_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_OP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_OP_expected_prev);
		$display ("     Real value = %b", data_out_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_out_OP_exp[5] = data_out_OP_expected_prev[5];
	end
	if (
		( data_out_OP_expected_prev[6] !== 1'bx ) && ( data_out_OP_prev[6] !== data_out_OP_expected_prev[6] )
		&& ((data_out_OP_expected_prev[6] !== last_data_out_OP_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_OP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_OP_expected_prev);
		$display ("     Real value = %b", data_out_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_out_OP_exp[6] = data_out_OP_expected_prev[6];
	end
	if (
		( data_out_OP_expected_prev[7] !== 1'bx ) && ( data_out_OP_prev[7] !== data_out_OP_expected_prev[7] )
		&& ((data_out_OP_expected_prev[7] !== last_data_out_OP_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_OP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_OP_expected_prev);
		$display ("     Real value = %b", data_out_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_out_OP_exp[7] = data_out_OP_expected_prev[7];
	end
	if (
		( priznak_expected_prev[0] !== 1'bx ) && ( priznak_prev[0] !== priznak_expected_prev[0] )
		&& ((priznak_expected_prev[0] !== last_priznak_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port priznak[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", priznak_expected_prev);
		$display ("     Real value = %b", priznak_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_priznak_exp[0] = priznak_expected_prev[0];
	end
	if (
		( priznak_expected_prev[1] !== 1'bx ) && ( priznak_prev[1] !== priznak_expected_prev[1] )
		&& ((priznak_expected_prev[1] !== last_priznak_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port priznak[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", priznak_expected_prev);
		$display ("     Real value = %b", priznak_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_priznak_exp[1] = priznak_expected_prev[1];
	end
	if (
		( RA_expected_prev[0] !== 1'bx ) && ( RA_prev[0] !== RA_expected_prev[0] )
		&& ((RA_expected_prev[0] !== last_RA_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RA_exp[0] = RA_expected_prev[0];
	end
	if (
		( RA_expected_prev[1] !== 1'bx ) && ( RA_prev[1] !== RA_expected_prev[1] )
		&& ((RA_expected_prev[1] !== last_RA_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RA_exp[1] = RA_expected_prev[1];
	end
	if (
		( RA_expected_prev[2] !== 1'bx ) && ( RA_prev[2] !== RA_expected_prev[2] )
		&& ((RA_expected_prev[2] !== last_RA_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RA_exp[2] = RA_expected_prev[2];
	end
	if (
		( RA_expected_prev[3] !== 1'bx ) && ( RA_prev[3] !== RA_expected_prev[3] )
		&& ((RA_expected_prev[3] !== last_RA_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RA_exp[3] = RA_expected_prev[3];
	end
	if (
		( RA_expected_prev[4] !== 1'bx ) && ( RA_prev[4] !== RA_expected_prev[4] )
		&& ((RA_expected_prev[4] !== last_RA_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RA_exp[4] = RA_expected_prev[4];
	end
	if (
		( RA_expected_prev[5] !== 1'bx ) && ( RA_prev[5] !== RA_expected_prev[5] )
		&& ((RA_expected_prev[5] !== last_RA_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RA_exp[5] = RA_expected_prev[5];
	end
	if (
		( RA_expected_prev[6] !== 1'bx ) && ( RA_prev[6] !== RA_expected_prev[6] )
		&& ((RA_expected_prev[6] !== last_RA_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RA_exp[6] = RA_expected_prev[6];
	end
	if (
		( RA_expected_prev[7] !== 1'bx ) && ( RA_prev[7] !== RA_expected_prev[7] )
		&& ((RA_expected_prev[7] !== last_RA_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RA_exp[7] = RA_expected_prev[7];
	end
	if (
		( RK_expected_prev[0] !== 1'bx ) && ( RK_prev[0] !== RK_expected_prev[0] )
		&& ((RK_expected_prev[0] !== last_RK_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RK[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RK_expected_prev);
		$display ("     Real value = %b", RK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RK_exp[0] = RK_expected_prev[0];
	end
	if (
		( RK_expected_prev[1] !== 1'bx ) && ( RK_prev[1] !== RK_expected_prev[1] )
		&& ((RK_expected_prev[1] !== last_RK_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RK[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RK_expected_prev);
		$display ("     Real value = %b", RK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RK_exp[1] = RK_expected_prev[1];
	end
	if (
		( RK_expected_prev[2] !== 1'bx ) && ( RK_prev[2] !== RK_expected_prev[2] )
		&& ((RK_expected_prev[2] !== last_RK_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RK[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RK_expected_prev);
		$display ("     Real value = %b", RK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RK_exp[2] = RK_expected_prev[2];
	end
	if (
		( RK_expected_prev[3] !== 1'bx ) && ( RK_prev[3] !== RK_expected_prev[3] )
		&& ((RK_expected_prev[3] !== last_RK_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RK[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RK_expected_prev);
		$display ("     Real value = %b", RK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RK_exp[3] = RK_expected_prev[3];
	end
	if (
		( RK_expected_prev[4] !== 1'bx ) && ( RK_prev[4] !== RK_expected_prev[4] )
		&& ((RK_expected_prev[4] !== last_RK_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RK[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RK_expected_prev);
		$display ("     Real value = %b", RK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RK_exp[4] = RK_expected_prev[4];
	end
	if (
		( RK_expected_prev[5] !== 1'bx ) && ( RK_prev[5] !== RK_expected_prev[5] )
		&& ((RK_expected_prev[5] !== last_RK_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RK[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RK_expected_prev);
		$display ("     Real value = %b", RK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RK_exp[5] = RK_expected_prev[5];
	end
	if (
		( RK_expected_prev[6] !== 1'bx ) && ( RK_prev[6] !== RK_expected_prev[6] )
		&& ((RK_expected_prev[6] !== last_RK_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RK[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RK_expected_prev);
		$display ("     Real value = %b", RK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RK_exp[6] = RK_expected_prev[6];
	end
	if (
		( RK_expected_prev[7] !== 1'bx ) && ( RK_prev[7] !== RK_expected_prev[7] )
		&& ((RK_expected_prev[7] !== last_RK_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RK[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RK_expected_prev);
		$display ("     Real value = %b", RK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RK_exp[7] = RK_expected_prev[7];
	end
	if (
		( rr_expected_prev[0] !== 1'bx ) && ( rr_prev[0] !== rr_expected_prev[0] )
		&& ((rr_expected_prev[0] !== last_rr_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[0] = rr_expected_prev[0];
	end
	if (
		( rr_expected_prev[1] !== 1'bx ) && ( rr_prev[1] !== rr_expected_prev[1] )
		&& ((rr_expected_prev[1] !== last_rr_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[1] = rr_expected_prev[1];
	end
	if (
		( rr_expected_prev[2] !== 1'bx ) && ( rr_prev[2] !== rr_expected_prev[2] )
		&& ((rr_expected_prev[2] !== last_rr_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[2] = rr_expected_prev[2];
	end
	if (
		( rr_expected_prev[3] !== 1'bx ) && ( rr_prev[3] !== rr_expected_prev[3] )
		&& ((rr_expected_prev[3] !== last_rr_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[3] = rr_expected_prev[3];
	end
	if (
		( rr_expected_prev[4] !== 1'bx ) && ( rr_prev[4] !== rr_expected_prev[4] )
		&& ((rr_expected_prev[4] !== last_rr_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[4] = rr_expected_prev[4];
	end
	if (
		( rr_expected_prev[5] !== 1'bx ) && ( rr_prev[5] !== rr_expected_prev[5] )
		&& ((rr_expected_prev[5] !== last_rr_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[5] = rr_expected_prev[5];
	end
	if (
		( rr_expected_prev[6] !== 1'bx ) && ( rr_prev[6] !== rr_expected_prev[6] )
		&& ((rr_expected_prev[6] !== last_rr_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[6] = rr_expected_prev[6];
	end
	if (
		( rr_expected_prev[7] !== 1'bx ) && ( rr_prev[7] !== rr_expected_prev[7] )
		&& ((rr_expected_prev[7] !== last_rr_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[7] = rr_expected_prev[7];
	end
	if (
		( rr_expected_prev[8] !== 1'bx ) && ( rr_prev[8] !== rr_expected_prev[8] )
		&& ((rr_expected_prev[8] !== last_rr_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[8] = rr_expected_prev[8];
	end
	if (
		( rr_expected_prev[9] !== 1'bx ) && ( rr_prev[9] !== rr_expected_prev[9] )
		&& ((rr_expected_prev[9] !== last_rr_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[9] = rr_expected_prev[9];
	end
	if (
		( rr_expected_prev[10] !== 1'bx ) && ( rr_prev[10] !== rr_expected_prev[10] )
		&& ((rr_expected_prev[10] !== last_rr_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[10] = rr_expected_prev[10];
	end
	if (
		( rr_expected_prev[11] !== 1'bx ) && ( rr_prev[11] !== rr_expected_prev[11] )
		&& ((rr_expected_prev[11] !== last_rr_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[11] = rr_expected_prev[11];
	end
	if (
		( rr_expected_prev[12] !== 1'bx ) && ( rr_prev[12] !== rr_expected_prev[12] )
		&& ((rr_expected_prev[12] !== last_rr_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[12] = rr_expected_prev[12];
	end
	if (
		( rr_expected_prev[13] !== 1'bx ) && ( rr_prev[13] !== rr_expected_prev[13] )
		&& ((rr_expected_prev[13] !== last_rr_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[13] = rr_expected_prev[13];
	end
	if (
		( rr_expected_prev[14] !== 1'bx ) && ( rr_prev[14] !== rr_expected_prev[14] )
		&& ((rr_expected_prev[14] !== last_rr_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[14] = rr_expected_prev[14];
	end
	if (
		( rr_expected_prev[15] !== 1'bx ) && ( rr_prev[15] !== rr_expected_prev[15] )
		&& ((rr_expected_prev[15] !== last_rr_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr_expected_prev);
		$display ("     Real value = %b", rr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr_exp[15] = rr_expected_prev[15];
	end
	if (
		( s_out_expected_prev[0] !== 1'bx ) && ( s_out_prev[0] !== s_out_expected_prev[0] )
		&& ((s_out_expected_prev[0] !== last_s_out_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_out_expected_prev);
		$display ("     Real value = %b", s_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_s_out_exp[0] = s_out_expected_prev[0];
	end
	if (
		( s_out_expected_prev[1] !== 1'bx ) && ( s_out_prev[1] !== s_out_expected_prev[1] )
		&& ((s_out_expected_prev[1] !== last_s_out_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_out_expected_prev);
		$display ("     Real value = %b", s_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_s_out_exp[1] = s_out_expected_prev[1];
	end
	if (
		( s_out_expected_prev[2] !== 1'bx ) && ( s_out_prev[2] !== s_out_expected_prev[2] )
		&& ((s_out_expected_prev[2] !== last_s_out_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_out_expected_prev);
		$display ("     Real value = %b", s_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_s_out_exp[2] = s_out_expected_prev[2];
	end
	if (
		( sko_expected_prev !== 1'bx ) && ( sko_prev !== sko_expected_prev )
		&& ((sko_expected_prev !== last_sko_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sko :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sko_expected_prev);
		$display ("     Real value = %b", sko_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_sko_exp = sko_expected_prev;
	end
	if (
		( sno_expected_prev !== 1'bx ) && ( sno_prev !== sno_expected_prev )
		&& ((sno_expected_prev !== last_sno_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sno :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sno_expected_prev);
		$display ("     Real value = %b", sno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_sno_exp = sno_expected_prev;
	end
	if (
		( wr_en_a_RP_expected_prev !== 1'bx ) && ( wr_en_a_RP_prev !== wr_en_a_RP_expected_prev )
		&& ((wr_en_a_RP_expected_prev !== last_wr_en_a_RP_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wr_en_a_RP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wr_en_a_RP_expected_prev);
		$display ("     Real value = %b", wr_en_a_RP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_wr_en_a_RP_exp = wr_en_a_RP_expected_prev;
	end
	if (
		( wr_en_OP_expected_prev !== 1'bx ) && ( wr_en_OP_prev !== wr_en_OP_expected_prev )
		&& ((wr_en_OP_expected_prev !== last_wr_en_OP_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wr_en_OP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wr_en_OP_expected_prev);
		$display ("     Real value = %b", wr_en_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_wr_en_OP_exp = wr_en_OP_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CYY_AU_OP_with_RR_YP_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [1:0] f_com;
reg [7:0] q_a;
reg [7:0] q_b;
reg set;
// wires                                               
wire [7:0] a;
wire [7:0] address_OP;
wire [7:0] b;
wire [7:0] CK;
wire cop;
wire [7:0] data_in_a_RP;
wire [7:0] data_in_OP;
wire [7:0] data_out_OP;
wire [1:0] priznak;
wire [7:0] RA;
wire [7:0] RK;
wire [15:0] rr;
wire [2:0] s_out;
wire sko;
wire sno;
wire wr_en_a_RP;
wire wr_en_OP;

wire sampler;                             

// assign statements (if any)                          
CYY_AU_OP_with_RR_YP i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.address_OP(address_OP),
	.b(b),
	.CK(CK),
	.clk(clk),
	.cop(cop),
	.data_in_a_RP(data_in_a_RP),
	.data_in_OP(data_in_OP),
	.data_out_OP(data_out_OP),
	.f_com(f_com),
	.priznak(priznak),
	.q_a(q_a),
	.q_b(q_b),
	.RA(RA),
	.RK(RK),
	.rr(rr),
	.s_out(s_out),
	.set(set),
	.sko(sko),
	.sno(sno),
	.wr_en_a_RP(wr_en_a_RP),
	.wr_en_OP(wr_en_OP)
);

// set
initial
begin
	set = 1'b1;
	set = #40000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// f_com[ 1 ]
initial
begin
	f_com[1] = 1'b0;
	f_com[1] = #810000 1'b1;
end 
// f_com[ 0 ]
initial
begin
	f_com[0] = 1'b0;
	f_com[0] = #430000 1'b1;
	f_com[0] = #380000 1'b0;
end 
// q_a[ 7 ]
initial
begin
	q_a[7] = 1'b0;
	q_a[7] = #225000 1'b1;
	q_a[7] = #225000 1'b0;
	q_a[7] = #130000 1'b1;
	q_a[7] = #60000 1'b0;
	q_a[7] = #120000 1'b1;
	q_a[7] = #60000 1'b0;
end 
// q_a[ 6 ]
initial
begin
	q_a[6] = 1'b1;
	q_a[6] = #450000 1'b0;
	q_a[6] = #130000 1'b1;
	q_a[6] = #120000 1'b0;
	q_a[6] = #60000 1'b1;
	q_a[6] = #239000 1'b0;
end 
// q_a[ 5 ]
initial
begin
	q_a[5] = 1'b1;
	q_a[5] = #580000 1'b0;
	q_a[5] = #240000 1'b1;
	q_a[5] = #179000 1'b0;
end 
// q_a[ 4 ]
initial
begin
	q_a[4] = 1'b0;
	q_a[4] = #580000 1'b1;
	q_a[4] = #60000 1'b0;
end 
// q_a[ 3 ]
initial
begin
	q_a[3] = 1'b0;
	q_a[3] = #580000 1'b1;
	q_a[3] = #120000 1'b0;
	q_a[3] = #60000 1'b1;
	q_a[3] = #60000 1'b0;
end 
// q_a[ 2 ]
initial
begin
	q_a[2] = 1'b0;
	q_a[2] = #115000 1'b1;
	q_a[2] = #335000 1'b0;
	q_a[2] = #130000 1'b1;
	q_a[2] = #120000 1'b0;
end 
// q_a[ 1 ]
initial
begin
	q_a[1] = 1'b0;
	q_a[1] = #115000 1'b1;
	q_a[1] = #110000 1'b0;
	q_a[1] = #355000 1'b1;
	q_a[1] = #60000 1'b0;
end 
// q_a[ 0 ]
initial
begin
	q_a[0] = 1'b1;
	q_a[0] = #115000 1'b0;
	q_a[0] = #110000 1'b1;
	q_a[0] = #355000 1'b0;
	q_a[0] = #60000 1'b1;
	q_a[0] = #60000 1'b0;
	q_a[0] = #120000 1'b1;
	q_a[0] = #179000 1'b0;
end 
// q_b[ 7 ]
initial
begin
	q_b[7] = 1'b0;
	q_b[7] = #450000 1'b1;
	q_b[7] = #70000 1'b0;
	q_b[7] = #240000 1'b1;
	q_b[7] = #60000 1'b0;
end 
// q_b[ 6 ]
initial
begin
	q_b[6] = 1'b0;
	q_b[6] = #450000 1'b1;
	q_b[6] = #70000 1'b0;
end 
// q_b[ 5 ]
initial
begin
	q_b[5] = 1'b0;
	q_b[5] = #580000 1'b1;
	q_b[5] = #120000 1'b0;
	q_b[5] = #60000 1'b1;
	q_b[5] = #60000 1'b0;
end 
// q_b[ 4 ]
initial
begin
	q_b[4] = 1'b0;
	q_b[4] = #450000 1'b1;
	q_b[4] = #130000 1'b0;
	q_b[4] = #60000 1'b1;
	q_b[4] = #60000 1'b0;
	q_b[4] = #60000 1'b1;
	q_b[4] = #60000 1'b0;
end 
// q_b[ 3 ]
initial
begin
	q_b[3] = 1'b0;
end 
// q_b[ 2 ]
initial
begin
	q_b[2] = 1'b1;
	q_b[2] = #450000 1'b0;
	q_b[2] = #70000 1'b1;
	q_b[2] = #60000 1'b0;
	q_b[2] = #60000 1'b1;
	q_b[2] = #60000 1'b0;
	q_b[2] = #120000 1'b1;
	q_b[2] = #179000 1'b0;
end 
// q_b[ 1 ]
initial
begin
	q_b[1] = 1'b0;
	q_b[1] = #450000 1'b1;
	q_b[1] = #130000 1'b0;
	q_b[1] = #60000 1'b1;
	q_b[1] = #60000 1'b0;
	q_b[1] = #60000 1'b1;
	q_b[1] = #60000 1'b0;
end 
// q_b[ 0 ]
initial
begin
	q_b[0] = 1'b1;
	q_b[0] = #520000 1'b0;
	q_b[0] = #60000 1'b1;
	q_b[0] = #120000 1'b0;
	q_b[0] = #120000 1'b1;
	q_b[0] = #179000 1'b0;
end 

CYY_AU_OP_with_RR_YP_vlg_sample_tst tb_sample (
	.clk(clk),
	.f_com(f_com),
	.q_a(q_a),
	.q_b(q_b),
	.set(set),
	.sampler_tx(sampler)
);

CYY_AU_OP_with_RR_YP_vlg_check_tst tb_out(
	.a(a),
	.address_OP(address_OP),
	.b(b),
	.CK(CK),
	.cop(cop),
	.data_in_a_RP(data_in_a_RP),
	.data_in_OP(data_in_OP),
	.data_out_OP(data_out_OP),
	.priznak(priznak),
	.RA(RA),
	.RK(RK),
	.rr(rr),
	.s_out(s_out),
	.sko(sko),
	.sno(sno),
	.wr_en_a_RP(wr_en_a_RP),
	.wr_en_OP(wr_en_OP),
	.sampler_rx(sampler)
);
endmodule

